# OpenShift only
# --------------
# Uncomment and configure the following if you encounter "Error creating: pods "..." is forbidden: unable to validate against any security context constraint"
# securityContext:
#     runAsNonRoot: true
#     runAsUser: ""
#     fsGroup: ""

# Default values for botfront.
botfront:
  imagePullSecret:
  # Set this to 'gke' when using the Enterprise Editon
  orchestrator: docker-compose
  # Only necessary with the open source editon
  initialProjectId: bf
  # SMTP URI used by Botfront to send accounts related transactional emails
  # smtpUri: smtp://login:password@smtp.yourserver.com:587
  logs:
    # One of debug, info, warn, error
    level: info
    # Comma seprated list of transports. Currently supported: console, stackdriver
    transport: console
    # Stack driver application logger name
    loggerName: botfront-app-log
  audit:
    transport: console
    # Stack driver audit logger name
    loggerName: botfront-audit-log
  
  
  app:
  # Botfront version (e.g: latest)
    version: v1.0.3
    # an optional key to protect your graphql API (recommemded)
    graphQLKey:
    # name used for labels and selectors
    appName: botfront
    # The complete host of the Botfront application
    host:
    # The protocol: http or https
    protocol: http
    image:
      # Botfront image name (e.g: botfront/botfront)
      name: botfront/botfront
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
    livenessProbe:
      initialDelaySeconds: 60
      periodSeconds: 3
    imagePullPolicy: IfNotPresent
  webhooks:
    enabled: false
    # name used for labels and selectors
    appName: botfront-webhooks
    version:
    image:
      # Botfront API image name (e.g: botfront/botfront)
      name: botfront/botfront-api
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    imagePullPolicy: IfNotPresent

  ingress:
    enabled: true
    nginx:
      # Set to true if your cluster uses the nginx-ingress controller
      enabled: true
      # Those are default values for nginx ingress annotations. Note that another is already present:
      # - kubernetes.io/ingress.class: nginx
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/ssl-redirect: "false"

    # If nginx.enabled is false, the following annotations will be added to the Ingress. This is ignored it nginx.enabled is true.
    annotations: []
    # Secret name containing the certificate
    tlsSecretName:
    # Host associated with the certificate. Might be different from app.host (could contain a wildcard)
    tlsHost:
    # If you are using Botfront Enterprise
  # licenseKey:

duckling:
  enabled: true
  name: duckling
  image: botfront/duckling:latest
  resources:
    requests:
      cpu: 100m
      memory: 128Mi

mongodb:
  mongodbPrefix: 'mongodb'
  # Wether a MongoDB instance should be deployed as part of this chart. Set this to false if you want to use an external MongoDB provider, such as Atlas
  enabled: false
  service:
    name: botfront-mongodb-service
    type: NodePort
  # MongoDB hosts and ports. Comma separated lists for clusters.
  mongodbHostsAndPorts: botfront-mongodb-service.botfront:27017
  # Name of the database containing Botfront data
  mongodbDatabase: bf
  # Query string of the MongoDB authentication database
  mongodbQueryString: '&retryWrites=true'
  # MongoDB root username
  mongodbRootUsername: root
  # Username of the MongoDB user that will have read-write access to the Botfront database. This is not the root user
  mongodbUsername: 'bfrw'
  # Password of the MongoDB user that will have read-write access to the Botfront database. This is not the root user
  mongodbPassword:
  # MongoDB root password
  mongodbRootPassword:
  # MongoDB oplog user username
  mongodbOplogUsername:
  # MongoDB oplog user password
  mongodbOplogPassword:


mongo-express:
  # Set enabled: true to deploy the mongo-express client
  enabled: false
  # Basic authentication username to access the interface
  basicAuthUsername:
  # Basic authentication password to access the interface
  basicAuthPassword:
  # MongoDB root username
  mongodbAdminUsername: root
  # MongoDB root password
  mongodbAdminPassword:
  mongodbEnableAdmin: true
  # Change this if using custom release name or namesmace {{ .Release.name }}-mongodb-service.{{ .Release.namespace }}
  mongodbServer: botfront-mongodb-service.botfront
  service:
    type: NodePort
  ingress:
    enabled: true
    hosts:
      - host:
        paths:
          - /
    tls: []

redis:
  # Set enabled: true to deploy redis
  enabled: false
  # Redis Cluster is not able to guarantee strong consistency.
  # In practical terms this means that under certain conditions it is possible that Redis Cluster
  # will lose writes that were acknowledged by the system to the client.
  # So you should not use a redis cluster because rasa uses it for storing locks, thus it needs to be consistent.
  cluster:
    enabled: false # do not change (see above)
    slaveCount: 0 # do not change (see above)
  # if the password is not set it will be randomly generated, you can set usePassword to false to not use a password
  # usePassword: false
  global:
    redis:
      password:

kubernetesApi:
  baseUrl:
  token:


